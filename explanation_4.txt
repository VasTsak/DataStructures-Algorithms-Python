First thing to do is create a Group class where it stores the users and subgroups it has.
Then we create a function where we test if the user belongs to the group. This function will take as arguments
 the user that we want to search for and the second argument the group that we want to check.
 We set a conditional statement for whether the group is indeed a group and if it is not then we return a message to the
 user of the program.
we do a lookup in a tree and we are using recursion to do that, where we get the subgroups of this group and test if the user is in the subgroups calling the function
we created but using the subgroup as group, in every other case (the group has no subgroups)
return False.

The big O notation of this script is O(m + n) where m is the number of groups and n is the number
of users, since it goes through those objects only once. The space complexity of this program is O(1) because it doesn't
really stores anything than a boolean value (True/False). 
