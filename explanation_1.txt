Firstly, we define a Node class. Then we create a linked list class to use it as storage where we also create an set_key, get_key,
delete_tail methods. The first method will create a node in the linked list and will assign it as head of the likned list.
The get_key method will return the value of the key (if it exists) and assigns the node containing the node as head of the linked
list. Finally the delete_tail method removes the tail and removes the size of the linked list by one.

Having created the two classes we will create another class for LRU_Cache where we initialize with capacity selected
by the user, an empty hash table to retrieve the item using its corresponding key, and an empty queue we created before
to store the keys of the hash table.

Having initialized LRU_Cache, We will create a get method that returns the storing element (if it is there) using its
corresponding key. Finally we create the set method where will assign a new element to the hash table and in case the
size of the hash table is bigger than the predefined capacity we delete the oldest element (that is why we have created
the delete_tail method).


The big O notation of this program is O(n) where n is the number of nodes, because we need to go through the linked list every time we do a method
at in linked list because for set_key we need to make sure that there are no duplicates, we need to assign the node
we get as head, and we need to define the tail of the linked list every time we call the delete_tail method.
The space complexity of this program is O(n), because it all the data it stores are in the linked list and in the
hash tables. 
